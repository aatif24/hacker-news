{"version":3,"sources":["components/Loader.jsx","layout/Nav.jsx","layout/Index.jsx","features/feeds/feedSlice.js","components/Filter.jsx","features/feeds/Feeds.jsx","App.js","app/store.js","serviceWorker.js","index.js"],"names":["App","className","role","href","aria-current","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","target","rel","children","Nav","API_BASE_URL","counterSlice","createSlice","name","initialState","feeds","story","loading","reducers","state","action","payload","actions","getStories","dispatch","axios","get","then","a","response","data","slice","catch","err","console","log","setStory","onClick","e","Feed","lazy","useDispatch","useState","setType","useSelector","useEffect","Loader","Filter","length","map","v","i","key","fallback","path","component","Feeds","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iHAAA,0BAceA,IAZH,WACR,OACI,oCACI,yBAAKC,UAAU,qDACX,yBAAKA,UAAU,iCAAiCC,KAAK,UACjD,0BAAMD,UAAU,WAAhB,mB,8MC2CLD,G,MA9CH,WACR,OACI,yBAAKC,UAAU,kDACX,yBAAKA,UAAU,wBACX,uBACIA,UAAU,kDACVE,KAAK,IACLC,eAAa,QAEb,uBAAGH,UAAU,wBAEjB,4BACIA,UAAU,iBACVI,KAAK,SACLC,cAAY,WACZC,cAAY,uBACZC,gBAAc,sBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMT,UAAU,yBAEpB,yBAAKA,UAAU,4BAA4BU,GAAG,uBAC1C,wBAAIV,UAAU,kEACV,wBAAIA,UAAU,uBACV,kBAAC,IAAD,CAASA,UAAU,uBAAwBW,GAAG,KAA9C,SAIJ,wBAAIX,UAAU,iBACV,uBACIA,UAAU,gBACVY,OAAO,SACPC,IAAI,sBACJX,KAAK,gCAJT,gBCrBbH,EATH,SAAC,GAAkB,IAAhBe,EAAe,EAAfA,SACX,OACI,yBAAKd,UAAU,aACX,kBAACe,EAAD,MACCD,I,kECNPE,EAAe,yCAERC,EAAeC,YAAY,CACpCC,KAAM,QACNC,aAAc,CACVC,MAAO,GACPC,MAAO,GACPC,SAAS,GAEbC,SAAU,CACNH,MAAO,SAACI,EAAOC,GACXD,EAAMJ,MAAQK,EAAOC,SAEzBJ,QAAS,SAACE,EAAOC,GACbD,EAAMF,QAAUG,EAAOC,Y,EAKDV,EAAaW,QAAhCP,E,EAAAA,MAAOE,E,EAAAA,QAETM,EAAa,eAACzB,EAAD,uDAAQ,MAAR,OAAkB,SAAC0B,GACzCA,EAASP,GAAQ,IACjBQ,IACKC,IAAIhB,EAAY,UAAMZ,EAAN,iBAChB6B,KAFL,+BAAAC,EAAA,MAEU,WAAOC,GAAP,SAAAD,EAAA,sDACFJ,EAAST,EAAMc,EAASC,KAAKC,MAAM,EAAG,MACtCP,EAASP,GAAQ,IAFf,2CAFV,uDAMKe,OAAM,SAACC,GACJC,QAAQC,IAAIF,QAgBTtB,IAAf,QCIelB,EAlDH,SAAC,GAAyB,IAAvBuB,EAAsB,EAAtBA,MAAOoB,EAAe,EAAfA,SAClB,OACI,oCACI,wBAAI1C,UAAU,2BACV,wBAAIA,UAAU,YACV,uBACIA,UAAqB,QAAVsB,EAAkB,kBAAoB,WACjDqB,QAAS,SAACC,GAAD,OAAOF,EAAS,QACzBvC,eAAa,QAHjB,QAQJ,wBAAIH,UAAU,YACV,uBACIA,UAAqB,QAAVsB,EAAkB,kBAAoB,WACjDqB,QAAS,SAACC,GAAD,OAAOF,EAAS,SAF7B,QAOJ,wBAAI1C,UAAU,YACV,uBACIA,UAAqB,QAAVsB,EAAkB,kBAAoB,WACjDqB,QAAS,SAACC,GAAD,OAAOF,EAAS,SAF7B,QAOJ,wBAAI1C,UAAU,YACV,uBACIA,UAAqB,SAAVsB,EAAmB,kBAAoB,WAClDqB,QAAS,SAACC,GAAD,OAAOF,EAAS,UAF7B,SAOJ,wBAAI1C,UAAU,YACV,uBACIA,UAAqB,QAAVsB,EAAkB,kBAAoB,WACjDqB,QAAS,SAACC,GAAD,OAAOF,EAAS,SAF7B,WCjCdG,G,MAAOC,gBAAK,kBAAM,uDAkDT/C,EAhDH,WACR,IAAM+B,EAAWiB,cADH,EAEUC,mBAAS,OAFnB,mBAEP5C,EAFO,KAED6C,EAFC,OAGaC,aAAY,SAACzB,GAAD,OAAWA,EAAMJ,SAAhDA,EAHM,EAGNA,MAAOE,EAHD,EAGCA,QAUf,OARA4B,qBAAU,WACNrB,EAASD,EAAWzB,MACrB,IAEH+C,qBAAU,WACNrB,EAASD,EAAWzB,MACrB,CAACA,IAGA,oCACKmB,GAAW,kBAAC6B,EAAA,EAAD,MAEZ,yBAAKpD,UAAU,uBACX,yBAAKA,UAAU,OACX,kBAACqD,EAAD,CAAQ/B,MAAOlB,EAAMsC,SAAUO,KAGnC,yBAAKjD,UAAU,OACVqB,GAASA,EAAMiC,OACVjC,EAAMkC,KAAI,SAACC,EAAGC,GACV,OACI,kBAAC,WAAD,CAAUzD,UAAU,GAAG0D,IAAKD,EAAGE,SAAU,kBAACP,EAAA,EAAD,OACrC,kBAACP,EAAD,CAAMa,IAAKD,EAAG/C,GAAI8C,QAI9B,SClBXzD,MAdf,WACI,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,KACI,kBAAC,WAAD,CAAUC,UAAU,GAAG2D,SAAU,kBAACP,EAAA,EAAD,OAC7B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOQ,KAAK,IAAIC,UAAWC,SCXpCC,cAAe,CAC1BC,QAAS,CACL3C,MAAOA,KCOK4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,MAAK,SAAA8C,GACjCA,EAAaC,kB","file":"static/js/main.985b87c2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../css/loader.css\";\nconst App = () => {\n    return (\n        <>\n            <div className=\"spinner text-center d-flex justify-content-center\">\n                <div className=\"spinner-border text-secondary \" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default App;\n","import React from \"react\";\n\nimport { NavLink } from \"react-router-dom\";\nimport \"../css/index.css\";\nconst App = () => {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-white \">\n            <div className=\"container-fluid px-0\">\n                <a\n                    className=\"navbar-brand text-muted font-weight-bold active\"\n                    href=\"/\"\n                    aria-current=\"page\"\n                >\n                    <i className=\"fas fa-font feed  \"></i>\n                </a>\n                <button\n                    className=\"navbar-toggler\"\n                    type=\"button\"\n                    data-toggle=\"collapse\"\n                    data-target=\"#navbarTogglerDemo01\"\n                    aria-controls=\"navbarTogglerDemo01\"\n                    aria-expanded=\"false\"\n                    aria-label=\"Toggle navigation\"\n                >\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse \" id=\"navbarTogglerDemo01\">\n                    <ul className=\"navbar-nav w-100 mb-2  mb-lg-0 d-flex justify-content-end px-0\">\n                        <li className=\"nav-item  mr-3 px-0\">\n                            <NavLink className=\"nav-link active px-0\"  to=\"/\">\n                                Home\n                            </NavLink>\n                        </li>\n                        <li className=\"nav-item px-0\">\n                            <a\n                                className=\"nav-link px-0\"\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                href=\"https://about.me/aatifshaikh\"\n                            >\n                                About\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport Nav from \"./Nav\";\n// import Footer from \"./Footer\";\n\nconst App = ({ children }) => {\n    return (\n        <div className=\"container\">\n            <Nav />\n            {children}\n        </div>\n    );\n};\n\nexport default App;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst API_BASE_URL = \"https://hacker-news.firebaseio.com/v0/\";\n\nexport const counterSlice = createSlice({\n    name: \"feeds\",\n    initialState: {\n        feeds: [],\n        story: {},\n        loading: false,\n    },\n    reducers: {\n        feeds: (state, action) => {\n            state.feeds = action.payload;\n        },\n        loading: (state, action) => {\n            state.loading = action.payload;\n        },\n    },\n});\n\nexport const { feeds, loading } = counterSlice.actions;\n\nexport const getStories = (type = \"top\") => (dispatch) => {\n    dispatch(loading(true));\n    axios\n        .get(API_BASE_URL + `${type}stories.json`)\n        .then(async (response) => {\n            dispatch(feeds(response.data.slice(0, 10)));\n            dispatch(loading(false));\n        })\n        .catch((err) => {\n            console.log(err);\n        });\n};\nexport const getStory = (id) => (dispatch) => {\n    // dispatch(loading(true));\n    // axios\n    //     .get(API_BASE_URL + `item/${id}.json`)\n    //     .then((response) => {\n    //         dispatch(story(response.data));\n    //         dispatch(loading(false));\n    //     })\n    //     .catch((err) => {\n    //         console.log(err);\n    //     });\n};\n\nexport default counterSlice.reducer;\n","import React from \"react\";\n\nconst App = ({ story, setStory }) => {\n    return (\n        <>\n            <ul className=\"nav justify-content-end\">\n                <li className=\"nav-item\">\n                    <p\n                        className={story === \"top\" ? \"nav-link active\" : \"nav-link\"}\n                        onClick={(e) => setStory(\"top\")}\n                        aria-current=\"page\"\n                    >\n                        Top\n                    </p>\n                </li>\n                <li className=\"nav-item\">\n                    <p\n                        className={story === \"new\" ? \"nav-link active\" : \"nav-link\"}\n                        onClick={(e) => setStory(\"new\")}\n                    >\n                        New\n                    </p>\n                </li>\n                <li className=\"nav-item\">\n                    <p\n                        className={story === \"ask\" ? \"nav-link active\" : \"nav-link\"}\n                        onClick={(e) => setStory(\"ask\")}\n                    >\n                        Ask\n                    </p>\n                </li>\n                <li className=\"nav-item\">\n                    <p\n                        className={story === \"show\" ? \"nav-link active\" : \"nav-link\"}\n                        onClick={(e) => setStory(\"show\")}\n                    >\n                        Show\n                    </p>\n                </li>\n                <li className=\"nav-item\">\n                    <p\n                        className={story === \"job\" ? \"nav-link active\" : \"nav-link\"}\n                        onClick={(e) => setStory(\"job\")}\n                    >\n                        Job\n                    </p>\n                </li>\n            </ul>\n        </>\n    );\n};\n\nexport default App;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState, Suspense, lazy } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getStories } from \"./feedSlice.js\";\nimport Filter from \"../../components/Filter\";\nimport Loader from \"../../components/Loader\";\nimport { FixedSizeList as List } from \"react-window\";\nconst Feed = lazy(() => import(\"../../components/FeedCard\"));\n\nconst App = () => {\n    const dispatch = useDispatch();\n    const [type, setType] = useState(\"top\");\n    const { feeds, loading } = useSelector((state) => state.feeds);\n\n    useEffect(() => {\n        dispatch(getStories(type));\n    }, []);\n\n    useEffect(() => {\n        dispatch(getStories(type));\n    }, [type]);\n\n    return (\n        <>\n            {loading && <Loader />}\n\n            <div className=\"container mx-0 px-0\">\n                <div className=\"row\">\n                    <Filter story={type} setStory={setType} />\n                </div>\n\n                <div className=\"row\">\n                    {feeds && feeds.length\n                        ? feeds.map((v, i) => {\n                              return (\n                                  <Suspense className=\"\" key={i} fallback={<Loader />}>\n                                      <Feed key={i} id={v} />\n                                  </Suspense>\n                              );\n                          })\n                        : null}\n\n                    {/* <List\n                        className=\"List\"\n                        height={900}\n                        itemCount={feeds.length}\n                        itemSize={35}\n                        width={1300}\n                    >\n                        {row}\n                    </List> */}\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default App;\n","import React, {  Suspense } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Loader from \"./components/Loader\";\r\nimport Layout from \"./layout/Index\";\r\n\r\n\r\nimport Feeds from \"./features/feeds/Feeds\";\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <Layout>\r\n                <Suspense className=\"\" fallback={<Loader />}>\r\n                    <Switch>\r\n                        <Route path=\"/\" component={Feeds} />\r\n                    </Switch>\r\n                </Suspense>\r\n            </Layout>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport feeds from \"../features/feeds/feedSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        feeds: feeds,\r\n    },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}